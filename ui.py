# ==================================================================================
# ui.py ‚Äî Interface do usu√°rio do sistema Clima-Cast-Crepaldi
# ==================================================================================

import streamlit as st
from datetime import datetime
import calendar
from dateutil.relativedelta import relativedelta
import locale

# ==================================================================================
# CONFIGURA√á√ÉO INICIAL (DEVE VIR ANTES DE QUALQUER OUTRA CHAMADA STREAMLIT)
# ==================================================================================

st.set_page_config(
    page_title="Clima-Cast-Crepaldi",
    #page_icon="üõ∞Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Protege contra erro de locale no Streamlit Cloud
try:
    locale.setlocale(locale.LC_TIME, "pt_BR.UTF-8")
except locale.Error:
    locale.setlocale(locale.LC_TIME, "C")

# ==================================================================================
# FUN√á√ïES PRINCIPAIS
# ==================================================================================

def configurar_pagina():
#   """Configura o t√≠tulo e separador inicial."""
#   st.title("Clima-Cast-Crepaldi")
    st.markdown("---")

def reset_analysis_state():
    """Callback para limpar o estado dos resultados sempre que um filtro √© alterado."""
    keys_to_clear = ['area_validada', 'show_confirmation_map', 'analysis_triggered', 'drawn_geometry']
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]

def renderizar_sidebar(dados_geo, mapa_nomes_uf):
    """Cria a barra lateral com os filtros."""
    with st.sidebar:
        st.header("Painel de Controle")

        st.radio(
            "Navega√ß√£o",
            ["Mapas", "S√©ries Temporais", "Sobre o Aplicativo"],
            label_visibility="collapsed",
            key='nav_option',
            on_change=reset_analysis_state
        )

        st.markdown("---")
        opcao_selecionada = st.session_state.get('nav_option', 'Mapas')

        if opcao_selecionada in ["Mapas", "S√©ries Temporais"]:
            st.markdown("<p style='text-align: center;'>Selecione os filtros abaixo para gerar os dados.</p>", unsafe_allow_html=True)
            
            st.subheader("1. Base de Dados")
            st.selectbox("Selecione a Base de Dados", ["ERA5-LAND"], key='base_de_dados', on_change=reset_analysis_state)
            st.divider()

            st.subheader("2. Vari√°vel Meteorol√≥gica")
            st.selectbox("Selecione a Vari√°vel", ["Temperatura do Ar (2m)", "Precipita√ß√£o Total", "Velocidade do Vento (10m)"], key='variavel', on_change=reset_analysis_state)
            st.divider()

            st.subheader("3. Localiza√ß√£o")
            st.selectbox("Selecione o tipo de √°rea de interesse", ["Estado", "Munic√≠pio", "C√≠rculo (Lat/Lon/Raio)", "Pol√≠gono"], key='tipo_localizacao', on_change=reset_analysis_state)
            
            tipo_localizacao = st.session_state.get('tipo_localizacao', 'Estado')
            lista_estados_formatada = ["Selecione..."] + [f"{mapa_nomes_uf[uf]} - {uf}" for uf in sorted(mapa_nomes_uf)]

            if tipo_localizacao == "Estado":
                st.selectbox("Selecione o Estado", lista_estados_formatada, key='estado', on_change=reset_analysis_state)
            elif tipo_localizacao == "Munic√≠pio":
                st.selectbox("Selecione o Estado", lista_estados_formatada, key='estado', on_change=reset_analysis_state)
                estado_selecionado_str = st.session_state.get('estado', 'Selecione...')
                lista_municipios = ["Selecione um estado primeiro"]
                if estado_selecionado_str and estado_selecionado_str != "Selecione...":
                    uf_selecionada = estado_selecionado_str.split(' - ')[-1]
                    lista_municipios = ["Selecione..."] + dados_geo[uf_selecionada]
                st.selectbox("Selecione o Munic√≠pio", lista_municipios, key='municipio', on_change=reset_analysis_state)
            elif tipo_localizacao == "C√≠rculo (Lat/Lon/Raio)":
                st.number_input("Latitude", value=-22.42, format="%.4f", key='latitude', on_change=reset_analysis_state)
                st.number_input("Longitude", value=-45.46, format="%.4f", key='longitude', on_change=reset_analysis_state)
                st.number_input("Raio (km)", min_value=1.0, value=10.0, step=1.0, key='raio', on_change=reset_analysis_state)
            elif tipo_localizacao == "Pol√≠gono":
                pass
            st.divider()

            st.subheader("4. Per√≠odo de An√°lise")
            
            if opcao_selecionada == "Mapas":
                st.selectbox("Selecione o tipo de per√≠odo", ["Personalizado", "Mensal", "Anual"], key='tipo_periodo', on_change=reset_analysis_state)
            else:
                st.session_state.tipo_periodo = "Personalizado"
            
            tipo_periodo = st.session_state.get('tipo_periodo', 'Personalizado')
            ano_atual = datetime.now().year
            lista_anos = list(range(ano_atual, 1979, -1))

            st.session_state.date_error = False
            if tipo_periodo == "Personalizado":
                hoje = datetime.now()
                data_padrao_fim = hoje - relativedelta(months=4)
                data_padrao_inicio = data_padrao_fim - relativedelta(days=7)
                col1, col2 = st.columns(2)
                with col1:
                    st.date_input("Data de In√≠cio", value=data_padrao_inicio, key='data_inicio', on_change=reset_analysis_state)
                with col2:
                    st.date_input("Data de Fim", value=data_padrao_fim, key='data_fim', on_change=reset_analysis_state)
                if st.session_state.data_fim < st.session_state.data_inicio:
                    st.error("Aten√ß√£o: A data final √© anterior √† data inicial.")
                    st.session_state.date_error = True
            elif tipo_periodo == "Mensal":
                st.selectbox("Ano", lista_anos, key='ano_mensal', on_change=reset_analysis_state)
                nomes_meses = [calendar.month_name[i].capitalize() for i in range(1, 13)]
                st.selectbox("M√™s", nomes_meses, key='mes_mensal', on_change=reset_analysis_state)
            elif tipo_periodo == "Anual":
                st.selectbox("Ano", lista_anos, key='ano_anual', on_change=reset_analysis_state)
            st.divider()

            if opcao_selecionada == "Mapas":
                st.subheader("5. Tipo de Mapa")
                st.radio("Selecione o formato", ["Interativo", "Est√°tico"], key='map_type', horizontal=True, on_change=reset_analysis_state)
                st.divider()

            if st.button("Gerar An√°lise", type="primary", use_container_width=True, disabled=st.session_state.get('date_error', False)):
                st.session_state['analysis_triggered'] = True
                st.rerun()
        
        return opcao_selecionada


def renderizar_pagina_principal(opcao_navegacao):
    """Exibe o conte√∫do da p√°gina principal com o logo."""
    agora = datetime.now()
    data_hora_formatada = agora.strftime("%d/%m/%Y, %H:%M:%S")

    col1, col2 = st.columns([3, 1])
    with col1:
        logo_col, title_col = st.columns([1, 5])
        with logo_col:
            st.image("logo.png", width=70)
        with title_col:
            st.title(f"Clima-Cast-Crepaldi: {opcao_navegacao}")

    with col2:
        st.write("")
        st.markdown(f"<p style='text-align: right; color: grey;'>{data_hora_formatada}</p>", unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("Configure sua an√°lise no **Painel de Controle** √† esquerda e clique em **Gerar An√°lise** para exibir os resultados aqui.")


def renderizar_resumo_selecao():
    """Mostra um resumo dos filtros selecionados."""
    st.subheader("üîé Filtros Escolhidos para An√°lise")
    col_resumo1, col_resumo2 = st.columns(2)
    with col_resumo1:
        st.markdown(f"**Base de Dados:** `{st.session_state.base_de_dados}`")
        st.markdown(f"**Vari√°vel:** `{st.session_state.variavel}`")
        st.markdown(f"**Tipo de Localiza√ß√£o:** `{st.session_state.tipo_localizacao}`")
        if st.session_state.tipo_localizacao == "Estado":
            st.markdown(f"**Estado:** `{st.session_state.estado}`")
        elif st.session_state.tipo_localizacao == "Munic√≠pio":
            st.markdown(f"**Estado:** `{st.session_state.estado}`")
            st.markdown(f"**Munic√≠pio:** `{st.session_state.municipio}`")
        elif st.session_state.tipo_localizacao == "C√≠rculo (Lat/Lon/Raio)":
            st.markdown(f"**Centro:** `Lat: {st.session_state.latitude}, Lon: {st.session_state.longitude}`")
            st.markdown(f"**Raio:** `{st.session_state.raio} km`")
        elif st.session_state.tipo_localizacao == "Pol√≠gono":
            st.markdown(f"**√Årea:** `Desenhada no mapa`")
    with col_resumo2:
        st.markdown(f"**Tipo de Per√≠odo:** `{st.session_state.tipo_periodo}`")
        if st.session_state.tipo_periodo == "Personalizado":
            data_inicio_fmt = st.session_state.data_inicio.strftime('%d/%m/%Y')
            data_fim_fmt = st.session_state.data_fim.strftime('%d/%m/%Y')
            st.markdown(f"**Data de In√≠cio:** `{data_inicio_fmt}`")
            st.markdown(f"**Data de Fim:** `{data_fim_fmt}`")
        elif st.session_state.tipo_periodo == "Mensal":
            st.markdown(f"**Per√≠odo:** `{st.session_state.mes_mensal} de {st.session_state.ano_mensal}`")
        elif st.session_state.tipo_periodo == "Anual":
            st.markdown(f"**Per√≠odo:** `Ano de {st.session_state.ano_anual}`")
        if st.session_state.get('nav_option') == "Mapas":
            st.markdown(f"**Tipo de Mapa:** `{st.session_state.map_type}`")
    st.info("Por favor, confira suas sele√ß√µes. A busca pelos dados ser√° iniciada com base nestes par√¢metros.")


def renderizar_validacao_mapa():
    """Exibe a mensagem de confer√™ncia e o bot√£o para validar a √°rea."""
    st.info("Confira a √°rea de interesse no mapa acima. Se estiver correto, clique em 'Validar √Årea' para continuar.")
    
    disable_validation = False
    
    if st.session_state.tipo_localizacao == "Pol√≠gono":
        if 'drawn_geometry' not in st.session_state:
            st.warning("Por favor, desenhe um pol√≠gono no mapa para continuar.")
            disable_validation = True

    if st.button("Validar √Årea", type="primary", use_container_width=True, disabled=disable_validation):
        st.session_state['area_validada'] = True
        st.session_state['show_confirmation_map'] = False
        st.rerun()


def renderizar_pagina_sobre():
    # Texto introdut√≥rio
    st.markdown("""
    O **Clima-Cast-Crepaldi** √© um sistema interativo desenvolvido no √¢mbito da disciplina  
    **CAT314 ‚Äì Ferramentas de Previs√£o de Curt√≠ssimo Prazo (Nowcasting)**, do curso de **Ci√™ncias Atmosf√©ricas da Universidade Federal de Itajub√° (UNIFEI)**.  
    Seu prop√≥sito √© **integrar dados meteorol√≥gicos de rean√°lises globais** e disponibiliz√°-los em uma plataforma visual, din√¢mica e acess√≠vel, 
    favorecendo tanto a **an√°lise cient√≠fica** quanto o **uso did√°tico**.
    """)

    # Objetivo
    st.markdown("<div class='subtitulo'> Objetivo</div>", unsafe_allow_html=True)
    st.markdown("""
    O sistema tem como principal objetivo **proporcionar uma interface intuitiva e interativa** para consulta, an√°lise e visualiza√ß√£o 
    de dados meteorol√≥gicos hist√≥ricos dos munic√≠pios brasileiros, utilizando a base **ERA5-Land**, disponibilizada pelo  
    **European Centre for Medium-Range Weather Forecasts (ECMWF)** por meio da plataforma **Google Earth Engine (GEE)**.

    Al√©m disso, o aplicativo busca:
    - Apoiar o aprendizado pr√°tico em t√©cnicas de an√°lise e visualiza√ß√£o de dados meteorol√≥gicos;
    - Facilitar a **an√°lise espa√ßo-temporal** de vari√°veis como temperatura, precipita√ß√£o e vento;
    - Demonstrar a **aplicabilidade de ferramentas computacionais ** na climatologia operacional.
    """)

    # Metodologia
    st.markdown("<div class='subtitulo'> Metodologia e Funcionamento</div>", unsafe_allow_html=True)
    st.markdown("""
    O dashboard permite ao usu√°rio selecionar:
    - A **vari√°vel meteorol√≥gica** de interesse (*temperatura, precipita√ß√£o ou vento*);
    - O **tipo de √°rea de estudo** (*Estado, Munic√≠pio, C√≠rculo ou Pol√≠gono*);
    - O **intervalo temporal** (*personalizado, mensal ou anual*).

    Ap√≥s a sele√ß√£o, o sistema acessa os dados do **ERA5-Land via GEE**, aplica a **agrega√ß√£o estat√≠stica apropriada** (m√©dia ou soma) 
    e exibe os resultados em diferentes formas:
    - **Mapas interativos** com *geemap* e *folium*;
    - **Mapas est√°ticos** com *matplotlib*;
    - **S√©ries temporais interativas** com *plotly.express*.

    Os resultados podem ser **exportados** em formatos **CSV**, **XLSX** e **PNG**, permitindo o reuso em relat√≥rios e an√°lises externas.
    """)

    # Tecnologias
    st.markdown("<div class='subtitulo'> Tecnologias Utilizadas</div>", unsafe_allow_html=True)
    st.markdown("""
    | Categoria | Ferramenta / Tecnologia | Fun√ß√£o |
    |------------|-------------------------|---------|
    | **Linguagem de Programa√ß√£o** | Python | Desenvolvimento principal e integra√ß√£o entre m√≥dulos |
    | **Framework de Interface** | Streamlit | Cria√ß√£o da interface interativa (dashboard web) |
    | **Plataforma Geoespacial** | Google Earth Engine (GEE) | Acesso e processamento de dados clim√°ticos e geogr√°ficos |
    | **Visualiza√ß√£o** | Geemap, Folium, Streamlit-Folium, Matplotlib, Plotly | Cria√ß√£o de mapas e gr√°ficos interativos |
    | **Fonte de Dados Meteorol√≥gicos** | ERA5-Land (ECMWF) | Rean√°lise global de alta resolu√ß√£o (~9 km) |
    | **Geometrias Territoriais** | Geobr | Fronteiras oficiais de estados e munic√≠pios brasileiros |
    """, unsafe_allow_html=True)

    # Fonte dos Dados
    st.markdown("<div class='subtitulo'> Fonte dos Dados</div>", unsafe_allow_html=True)
    st.markdown("""
    Os dados utilizados prov√™m do produto **ERA5-Land Daily Aggregated**, mantido pelo **ECMWF (European Centre for Medium-Range Weather Forecasts)** 
    e disponibilizado no **Google Earth Engine (GEE)**.  
    Esse conjunto de dados fornece **estimativas di√°rias de vari√°veis meteorol√≥gicas de superf√≠cie** com resolu√ß√£o espacial de **0,1¬∞ (~9 km)**, 
    cobrindo o per√≠odo de **1950 at√© o presente**.  
    A confiabilidade e consist√™ncia do ERA5-Land o tornam uma refer√™ncia para **estudos clim√°ticos e hidrometeorol√≥gicos**.
    """)

    # Rodap√©
    st.markdown("<hr class='divisor'>", unsafe_allow_html=True)
    st.markdown("<p style='text-align:center;color:gray;font-size:12px;'>Desenvolvido por Paulo C. Crepaldi ‚Äì CAT314 / UNIFEI</p>", unsafe_allow_html=True)